// Autogenerated from Pigeon (v9.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.wanghl.flutter_dev_template;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Message {
    private @Nullable Long type;

    public @Nullable Long getType() {
      return type;
    }

    public void setType(@Nullable Long setterArg) {
      this.type = setterArg;
    }

    private @Nullable String message;

    public @Nullable String getMessage() {
      return message;
    }

    public void setMessage(@Nullable String setterArg) {
      this.message = setterArg;
    }

    public static final class Builder {

      private @Nullable Long type;

      public @NonNull Builder setType(@Nullable Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable String message;

      public @NonNull Builder setMessage(@Nullable String setterArg) {
        this.message = setterArg;
        return this;
      }

      public @NonNull Message build() {
        Message pigeonReturn = new Message();
        pigeonReturn.setType(type);
        pigeonReturn.setMessage(message);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(type);
      toListResult.add(message);
      return toListResult;
    }

    static @NonNull Message fromList(@NonNull ArrayList<Object> list) {
      Message pigeonResult = new Message();
      Object type = list.get(0);
      pigeonResult.setType((type == null) ? null : ((type instanceof Integer) ? (Integer) type : (Long) type));
      Object message = list.get(1);
      pigeonResult.setMessage((String) message);
      return pigeonResult;
    }
  }

  private static class ApiCodec extends StandardMessageCodec {
    public static final ApiCodec INSTANCE = new ApiCodec();

    private ApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Message.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Message) {
        stream.write(128);
        writeValue(stream, ((Message) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * Flutter -> Native(Android/iOS)
   *
   * Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface Api {
    /** 无需传参 */
    void doSomethingNoParam();
    /** 传递参数 */
    void doSomethingWithParam(@NonNull Message msg);

    /** The codec used by Api. */
    static MessageCodec<Object> getCodec() {
      return ApiCodec.INSTANCE;
    }
    /**Sets up an instance of `Api` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, Api api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.doSomethingNoParam", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.doSomethingNoParam();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.Api.doSomethingWithParam", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Message msgArg = (Message) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  api.doSomethingWithParam(msgArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class NativeApiCodec extends StandardMessageCodec {
    public static final NativeApiCodec INSTANCE = new NativeApiCodec();

    private NativeApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Message.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Message) {
        stream.write(128);
        writeValue(stream, ((Message) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * Native(Android/iOS) -> Flutter
   *
   * Generated class from Pigeon that represents Flutter messages that can be called from Java.
   */
  public static class NativeApi {
    private final BinaryMessenger binaryMessenger;

    public NativeApi(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */     public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by NativeApi. */
    static MessageCodec<Object> getCodec() {
      return NativeApiCodec.INSTANCE;
    }
    /** native异步完成任务后发送结果给flutter层 */
    public void doSomethingResult(@NonNull Message msgResultArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.NativeApi.doSomethingResult", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(msgResultArg)),
          channelReply -> callback.reply(null));
    }
  }
}
